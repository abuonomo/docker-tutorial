
user  nginx;
worker_processes  1;

# Because we want the nginx logs to be visible by viewing the container
# logs, we output the logs to stderr instead of a file. This way, when nginx
# runs on the container, its log goes to stderr and it captured by the container log.
# This allows us to see the error log without being inside of the container.

error_log  stderr;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    
    server { # simple reverse-proxy
        # Listening on port 81 of the nginx container.
        # (our docker-compose files maps this (81) to the system's port 80).
        listen       81;
        listen      443 default_server ssl;

        server_name  _;

        location /network1/flask1/ {
            # Looking at the exposed port 8000 of the flask container.
            # We can do this because the nginx container (which uses this
            # config file) is on the same network as the flask container (because
            # they are defined in the same docker-compose file).
            proxy_pass      http://flask11:8000/;
        }

        location /network1/flask2/ {
            # Looking at the exposed port 8000 of the flask container.
            # We can do this because the nginx container (which uses this
            # config file) is on the same network as the flask container (because
            # they are defined in the same docker-compose file).
            proxy_pass      http://flask12:8000/;
        }

        location /network2/flask1/ {
            resolver 127.0.0.1 valid=30s;
            # Looking at the exposed port 8000 of the flask container.
            # We can do this because the nginx container (which uses this
            # config file) is on the same network as the flask container (because
            # they are defined in the same docker-compose file).
            proxy_pass      http://flask21:8000/;
        }

       # location /mattersmost/ {
       #     resolver 127.0.0.1 valid=30s;
       #     # Looking at the exposed port 8000 of the flask container.
       #     # We can do this because the nginx container (which uses this
       #     # config file) is on the same network as the flask container (because
       #     # they are defined in the same docker-compose file).
       #     proxy_pass      http://mattersmost:80/;
       # }
    }
}
